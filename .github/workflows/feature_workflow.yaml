name: Feature Branch Workflow (NO PR)

on:
  workflow_dispatch:
    inputs:
      branch_name:
        description: 'Enter the branch name without the "feature/" prefix'
        required: true
      action:
        description: 'Choose an action: start, finish, or resume'
        required: true
        default: 'start'
        type: choice
        options:
          - start
          - finish
          - resume

jobs:
  start_job:
    if: ${{ github.event.inputs.action == 'start' }}
    runs-on: ubuntu-24.04

    permissions:
      contents: write

    steps:
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '21'

      - name: Set up variables
        run: |
          echo "BRANCH_NAME=feature/${{ github.event.inputs.branch_name }}" >> $GITHUB_ENV
          echo "Set BRANCH_NAME to feature/${{ github.event.inputs.branch_name }}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Create or switch to branch
        run: |
          if git ls-remote --exit-code --heads origin "${{ env.BRANCH_NAME }}"; then
            git checkout "${{ env.BRANCH_NAME }}"
            echo "Checked out existing branch ${{ env.BRANCH_NAME }}"
          else
            git checkout -b "${{ env.BRANCH_NAME }}"
            echo "Created and checked out new branch ${{ env.BRANCH_NAME }}"
          fi

      - name: Modify Maven coordinate
        run: |
          set -e

          # Extract the current version from pom.xml
          ORIGINAL_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Original version: $ORIGINAL_VERSION"

          # Save the original version to a file
          echo "$ORIGINAL_VERSION" > original_version.txt

          # Append '-feature-branch_name' to the version
          NEW_VERSION="${ORIGINAL_VERSION}-feature-${{ github.event.inputs.branch_name }}"
          echo "New version: $NEW_VERSION"

          # Update the version in pom.xml without changing the parent version
          mvn versions:set -DnewVersion="$NEW_VERSION" -DgenerateBackupPoms=false

      - name: Commit and push changes
        run: |
          git add pom.xml original_version.txt
          git commit -m "[START] Update Maven coordinate for ${{ env.BRANCH_NAME }}"
          git push origin "${{ env.BRANCH_NAME }}"

  finish_job:
    if: ${{ github.event.inputs.action == 'finish' }}
    runs-on: ubuntu-24.04

    permissions:
      contents: write

    steps:
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '21'

      - name: Set up variables
        run: |
          echo "BRANCH_NAME=feature/${{ github.event.inputs.branch_name }}" >> $GITHUB_ENV
          echo "Set BRANCH_NAME to feature/${{ github.event.inputs.branch_name }}"

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-all: true

      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

      - name: Checkout feature branch
        run: |
          git checkout "${{ env.BRANCH_NAME }}"

      - name: Verify branch
        run: |
          git branch
          echo "Current branch: $(git rev-parse --abbrev-ref HEAD)"

      - name: Modify Maven coordinate
        run: |
          set -e
  
          # Read the original version from the file
          if [ -f original_version.txt ]; then
            ORIGINAL_VERSION=$(cat original_version.txt)
            echo "Original version from file: $ORIGINAL_VERSION"
          else
            echo "Error: original_version.txt not found"
            exit 1
          fi
  
          # Update the version in pom.xml without changing the parent version
          mvn versions:set -DnewVersion="$ORIGINAL_VERSION" -DgenerateBackupPoms=false
  
          # Remove the original_version.txt file
          rm original_version.txt

      - name: Commit and push changes
        run: |
          git add pom.xml
          git commit -m "[FINISH] Revert Maven coordinate for ${{ env.BRANCH_NAME }}"
          git push origin "${{ env.BRANCH_NAME }}"

  resume_job:
    if: ${{ github.event.inputs.action == 'resume' }}
    runs-on: ubuntu-24.04
  
    permissions:
      contents: write
  
    steps:
      - name: Set up Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '21'
  
      - name: Set up variables
        run: |
          echo "BRANCH_NAME=feature/${{ github.event.inputs.branch_name }}" >> $GITHUB_ENV
          echo "Set BRANCH_NAME to feature/${{ github.event.inputs.branch_name }}"
  
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-all: true
  
      - name: Configure Git
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"
  
      - name: Checkout feature branch
        run: |
          git checkout "${{ env.BRANCH_NAME }}"

      - name: Modify Maven coordinate
        run: |
          set -e

          # Ensure we're on the correct branch
          git checkout "${{ env.BRANCH_NAME }}"

          # Extract the current version from pom.xml
          CURRENT_VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "Current version: $CURRENT_VERSION"

          # Read the original version from the file
          if [ -f original_version.txt ]; then
            ORIGINAL_VERSION=$(cat original_version.txt)
            echo "Original version from file: $ORIGINAL_VERSION"
          else
            echo "Error: original_version.txt not found"
            exit 1
          fi

          # Check if the current version matches the original version
          if [ "$CURRENT_VERSION" == "$ORIGINAL_VERSION" ]; then
            # Append '-feature-branch_name' to the version
            NEW_VERSION="${ORIGINAL_VERSION}-feature-${{ github.event.inputs.branch_name }}"
            echo "New version: $NEW_VERSION"

           # Update the version in pom.xml without changing the parent version
            mvn versions:set -DnewVersion="$NEW_VERSION" -DgenerateBackupPoms=false

            # Set output to indicate that version was changed
            echo "::set-output name=version_changed::true"
          else
            echo "Version already includes '-feature-${{ github.event.inputs.branch_name }}'"
            echo "::set-output name=version_changed::false"
          fi

      - name: Commit and push changes
        if: steps.modify_maven_coordinate.outputs.version_changed == 'true'
        run: |
          git add pom.xml
          git commit -m "[RESUME] Update Maven coordinate for ${{ env.BRANCH_NAME }}"
          git push origin "${{ env.BRANCH_NAME }}"
